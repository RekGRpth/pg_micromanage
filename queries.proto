message SelectQuery {
  required PlanNode plan = 1;
  repeated RangeTable rtable = 2;
}

message SequenceScan {
  required uint32 table = 1;       // The index of the RangeTable
  repeated Expression target = 2;  // projection
  optional Expression qual = 3;    // selection
}

message PlanNode {
  oneof kind {
    SequenceScan sscan = 1;
    JoinNode join = 2;
  }
}

message JoinNode {
  enum Kind {
    HASH = 0;   // Builds a hash table out of right and scans it for every row in left
    MERGE = 1;  // Sorts left and right on the join column then scans both
    NESTED = 4; // Materializes right and scans it for every iteration
  }
  enum Type {
    INNER = 0;
    LEFT = 1;
    FULL = 2;
    RIGHT = 3;
    SEMI = 4;
    ANTI = 5;
  }
  required Kind kind = 1;
  required Type type = 2;
  required Expression qual = 3;
  required PlanNode left = 4;
  required PlanNode right = 5;
}

message RangeTable {
  required string name = 1;
}

message Expression {
  message ColumnRef {            // Represents a Var
    required uint32 table = 1;   // The index of the RangeTable
    required string column = 2;  // The name of the attribute
  }
  
  message Operation {
    required string name = 1;
    repeated Expression arg = 2;
  }

  message Constant {
    oneof type {
      uint32 uint = 1;
      bool bool = 2;
    }
  }

  oneof expr {
    ColumnRef var = 1;
    Operation op = 2;
    Constant const = 3;
  }
}
