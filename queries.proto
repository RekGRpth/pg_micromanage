message SelectQuery {
  required PlanNode plan = 1;
  repeated RangeTable rtable = 2;  // All the tables involved in the query
}

message RangeTable {
  /*
   * RangeTblEntry. For now this only references relations however RangeTblEntrys
   * can also reference CTEs, constant values, subqueries, etc. They can also
   * contain sampling info.
   */
  required string name = 1;
}

message PlanNode {
  repeated Expression target = 1;  // projection, the cols which are returned
  optional Expression qual = 2;    // selection, the rows which are returned
  oneof kind {
    SequenceScan sscan = 3;
    JoinNode join = 4;
    Materialize materialize = 5;
  }
}

message SequenceScan {
  required uint32 table = 1;       // The index of the RangeTable to scan
}

/* run the subplan and store the results on disk, allowing for quick rescanning */
message Materialize {
  required PlanNode plan = 1;
}

message JoinNode {
  enum Kind {
    HASH = 0;   // Builds a hash table out of right and scans it for every row in left
    MERGE = 1;  // Sorts left and right on the join column then scans both
    NESTED = 2; // Materializes right and scans it for every iteration
  }
  enum Type {
    INNER = 0;  // for every row in left, return it with every matching row of right
    LEFT = 1;   // inner join but also include rows which don't match any rows from right
    FULL = 2;   // inner join, but with all the extra results LEFT and RIGHT would add
    RIGHT = 3;  // left join but for every row of right
    SEMI = 4;   // returns left if a matching row exists in right
    ANTI = 5;   // returns left if no matching rows exist in right
  }
  required Kind kind = 1;
  required Type type = 2;  // not all types are supported for every kind

  /*
   * joinqual decides which rows match, which rows should be filled with NULLs
   * qual (in the plan containing this JoinNode) chooses which of the joined rows to keep
   */
  required Expression joinqual = 3;

  required PlanNode left = 4;   // the outer table
  required PlanNode right = 5;  // the inner table
}

message Expression {
  message ColumnRef {            // Represents a Var
    required uint32 table = 1;   // The index of the RangeTable
    required string column = 2;  // The name of the attribute
  }

  message LeftRef {
    required uint32 target = 1;
  }

  message RightRef {
    required uint32 target = 2;
  }
  
  message Operation {
    required string name = 1;
    repeated Expression arg = 2;
  }

  message Constant {
    oneof type {
      uint32 uint = 1;
      bool bool = 2;
    }
  }

  oneof expr {
    ColumnRef var = 1;
    LeftRef leftRef = 2;
    RightRef rightRef = 3;
    Operation op = 4;
    Constant const = 5;
  }
}
