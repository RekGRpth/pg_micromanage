CREATE EXTENSION micromanage;
-- SELECT a FROM a;
\set buf `cat example-messages/select-a-from-a.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
ERROR:  table a does not exist
CREATE TABLE a (a int);
INSERT INTO a VALUES (1);
INSERT INTO a VALUES (10);
SELECT * FROM run_select(:'buf');
 a  
----
  1
 10
(2 rows)

-- SELECT d FROM a;
\set buf `cat example-messages/select-d-from-a.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
ERROR:  could not find column d of table 1
-- this is not expressable in sql, it should definitely fail!
\set buf `cat example-messages/select-d-from-bad-index.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
WARNING:  cant select from table 2, using table 1 instead
ERROR:  could not find column d of table 1
-- SELECT a, 10 FROM a;
\set buf `cat example-messages/select-const-from-a.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
 a  | a  
----+----
  1 | 10
 10 | 10
(2 rows)

-- SELECT a + 10 FROM a;
\set buf `cat example-messages/select-a-plus-10.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
 a  
----
 11
 20
(2 rows)

-- SELECT a, a > 5 FROM a;
\set buf `cat example-messages/select-a-gt-5.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
 a  | a 
----+---
  1 | f
 10 | t
(2 rows)

-- SELECT a FROM a WHERE a = 10;
\set buf `cat example-messages/select-where-a-eq.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
 a  
----
 10
(1 row)

-- SELECT a FROM a WHERE a + 10;
\set buf `cat example-messages/select-with-non-bool-qual.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
ERROR:  quals must return a boolean
-- SELECT a FROM a WHERE true;
\set buf `cat example-messages/select-where-true.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
 a  
----
  1
 10
(2 rows)

-- SELECT a FROM a WHERE false;
\set buf `cat example-messages/select-where-false.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
 a 
---
(0 rows)

-- SELECT a + true FROM a;
\set buf `cat example-messages/select-a-plus-true.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
ERROR:  could not find operator named "+"
DETAIL:  arg types: "int4" and "bool"
-- SELECT a = true FROM a;
\set buf `cat example-messages/select-a-eq-true.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
ERROR:  could not find operator named "="
DETAIL:  arg types: "int4" and "bool"
-- not expressible, should gracefully error
\set buf `cat example-messages/select-inner-from-a.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
ERROR:  cannot create RightRef, there is no right subplan
-- not expressible, should gracefully error
\set buf `cat example-messages/select-outer-from-a.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
ERROR:  cannot create LeftRef, there is no left subplan
CREATE TABLE b (a int);
INSERT INTO b VALUES (1);
-- SELECT a.a FROM a INNER NESTEDLOOP JOIN b ON (a.a = b.a);
\set buf `cat example-messages/simple-inner-nestedloop.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
 a 
---
 1
(1 row)

-- SELECT a.a FROM a LEFT NESTEDLOOP JOIN b ON (a.a = b.a);
\set buf `cat example-messages/simple-left-nestedloop.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
 a  
----
  1
 10
(2 rows)

-- SELECT a.a FROM a RIGHT NESTEDLOOP JOIN b ON (a.a = b.a);
\set buf `cat example-messages/simple-right-nestedloop.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
ERROR:  nestedloops do not support RIGHT OUTER joins
DETAIL:  how would a nestedloop even do that?
HINT:  flip the branches then use a LEFT OUTER join
-- SELECT a.a FROM a ORDER BY a DESC;
INSERT INTO A VALUES (5);
INSERT INTO A VALUES (11);
INSERT INTO A VALUES (7);
\set buf `cat example-messages/select-a-desc.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
 a  
----
 11
 10
  7
  5
  1
(5 rows)

-- SELECT a.a FROM a ORDER BY a ASC;
\set buf `cat example-messages/select-a-asc.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
 a  
----
  1
  5
  7
 10
 11
(5 rows)

TRUNCATE a;
ALTER TABLE a ADD COLUMN b int;
INSERT INTO a VALUES (1, 7);
INSERT INTO a VALUES (1, 10);
INSERT INTO a VALUES (5, 2);
INSERT INTO a VALUES (5, 9);
INSERT INTO a VALUES (3, 1);
-- SELECT a.a FROM a ORDER BY a ASC, b DESC;
\set buf `cat example-messages/select-a-asc-b-desc.msg | protoc queries.proto --encode=SelectQuery | base64 -w0`
SELECT * FROM run_select(:'buf');
 a | a  
---+----
 1 | 10
 1 |  7
 3 |  1
 5 |  9
 5 |  2
(5 rows)

